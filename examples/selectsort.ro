use assert

# This function attempts to sort the specified list in an imperative manner,
# using mutability to handle the list.
#   - [arr] is a list of ints, to be sorted via selection-sort.
def imperativeSort (arr : [Int]) : Void =
  mutable var i = 0
  mutable var j = 0
  
  while j <= length arr do
    mutable var iMin = j
    while i < length arr do
      if arr[i] < arr[iMin] then iMin := i end
      i := i + 1
    done
  
    if iMin \= j then
      var temp = arr[j]
      arr[j] := arr[iMin]
      arr[iMin] := temp
    end
    
    j := j + 1
  done
end

# This function attempts to sort the specified list in a functional manner,
# assuming that the list is declared immutable and handling it as such.
#   - [arr] is a list of ints, to be sorted via selection-sort.
def functionalSort (arr : [Int]) : [Int] =
  def selectR head acc tail =
    give match tail with
      case []      -> head :: functionalSort acc
      case x :: xs ->
        if x < head then
          selectR x (head :: acc) xs
        else
          selectR head (x :: acc) xs
  end
  give match arr with
    case []     -> []
    case h :: t -> selectR h [] t
end

# Main execution block. Checks to make sure that both sorting algorithms work
# equally as effectively in that they return the same answer on a simple list.
def main (args : [String]) : Int =
  mutable arr = [ 3 ; 4 ; -1 ; 15 ; -2 ; 17 ]
  call imperativeSort arr
  call assertEq (arr, [ -2 ; -1 ; 3 ; 4 ; 15 ; 17 ])
  arr2 = [ 3 ; 4 ; -1 ; 15 ; -2 ; 17 ]
  call assertEq (functionalSort arr2, [ -2 ; -1 ; 3 ; 4 ; 15 ; 17 ])
  give 0
end
